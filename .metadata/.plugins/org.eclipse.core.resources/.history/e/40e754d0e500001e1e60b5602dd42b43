package com.shopme.admin.user;

import java.io.IOException;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FileUploadUtil;
import com.shopme.admin.user.UserService;
import com.shopme.admin.user.export.UserCsvExporter;
import com.shopme.admin.user.export.UserExcelExporter;
import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

import jakarta.servlet.http.HttpServletResponse;


@Controller
public class UserController {
	@Autowired
	private UserService userService;
	
	public static String UPLOAD_DIRECTORY = System.getProperty("user.dir") + "/uploads";
	
	@GetMapping("/users")
	public String listFirstPage(Model model) {
		
		return listByPage(1, model,"firstName","asc",null);
	}
	@GetMapping("/users/page/{pageNum}")
	public String listByPage(@PathVariable int pageNum,Model model,@Param("sortField")String sortField,@Param("sortDir")String sortDir,@Param("keyword")String keyword) {
		System.out.println("Sort Field: "+sortField);
		System.out.println("Sort Dir: "+sortDir);
		Page<User> page = userService.listByPage(pageNum,sortField,sortDir,keyword);
		List<User> listUsers = page.getContent();
		long startCount =(pageNum-1)*UserService.USERS_PER_PAGE+1;
		long endCount= startCount+UserService.USERS_PER_PAGE-1;
		if(endCount>page.getTotalElements()){
			endCount=page.getTotalElements();
		}
		String reverseSortDir=sortDir.equals("asc")?"desc":"asc";
		model.addAttribute("currentPage",pageNum);
		model.addAttribute("totalPages",page.getTotalPages());
		model.addAttribute("startCount",startCount);
		model.addAttribute("endCount",endCount);
		model.addAttribute("totalItems",page.getTotalElements());
		model.addAttribute("listUsers",listUsers);
		model.addAttribute("sortField",sortField);
		model.addAttribute("sortDir",sortDir);
		model.addAttribute("reverseSortDir",reverseSortDir);
		model.addAttribute("keyword",keyword);
		return "users/users";
	}
	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles=userService.listRole();
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user",user);
		model.addAttribute("listRoles",listRoles);
		model.addAttribute("pageTitle","Create New User");
		return "users/user_form";
	}

	@PostMapping("/users/save")
	 public String saveUser(User user,RedirectAttributes redirectAttributes
		   ,@RequestParam MultipartFile image) throws IOException {
				// handle file upload
			    if (!image.isEmpty()) {
			        String fileName = StringUtils.cleanPath(image.getOriginalFilename());
			        user.setPhotos(fileName);
			        User savedUser=userService.save(user);
			        String uploadDir = "user-photos/" + savedUser.getUserid();
			        FileUploadUtil.cleanDir(uploadDir);
			        FileUploadUtil.saveFile(uploadDir, fileName, image);
			    }else {
			    	if(user.getPhotos().isEmpty()) user.setPhotos(null);
			    	userService.save(user);
			    }
			    
			    redirectAttributes.addFlashAttribute("message","The user has been saved success.");
				return getRedirectURLtoAffectedUser(user);
	 }
	private String getRedirectURLtoAffectedUser(User user) {
		String firstPartOfEmail = user.getEmail().split("@")[0];
		return "redirect:/users/page/1?sortField=userid&sortDir=asc&keyword="+firstPartOfEmail;
	}
	@GetMapping("/users/edit/{userid}")
	public String editUser(@PathVariable(name="userid")Integer userid,Model model,RedirectAttributes redirectAttributes) {
		try {
			User user=userService.get(userid);
			List<Role> listRoles=userService.listRole();
			model.addAttribute("user",user);
			model.addAttribute("pageTitle","Edit User(Id:"+userid+")");
			model.addAttribute("listRoles",listRoles);
			return "users/user_form";
		}catch(UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message",ex.getMessage());
		}
		return "redirect:/users";
		
	}
	
	@GetMapping("/users/delete/{userid}")
	public String deleteUser(@PathVariable(name="userid")Integer userid,Model model,RedirectAttributes redirectAttributes) {
		try {
			userService.delete(userid);
			redirectAttributes.addFlashAttribute("message","The user ID "+userid+" has been detele successfully");

		}catch(UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message",ex.getMessage());
			
		}
			return "redirect:/users";
		
	}
	
	@GetMapping("/users/{userid}/enabled/{status}")
	public String updateUserEnableStatus(@PathVariable(name="userid")Integer userid,@PathVariable("status")boolean enabled,RedirectAttributes redirectAttributes) {
		userService.updateUserEnableStatus(userid, enabled);
		String status=enabled ?"enabled":"disabled";
		String message = "The user ID "+userid+" has been "+status;
		redirectAttributes.addFlashAttribute("message",message);
		return "redirect:/users";
	}
	@GetMapping("/users/export/csv")
	public void exportToCSV(HttpServletResponse response) throws IOException {
		List<User> listUsers =userService.listAll();
		UserCsvExporter exporter = new UserCsvExporter();
		exporter.export(listUsers, response);
		
	}
	@GetMapping("/users/export/excel")
	public void exportToExcel(HttpServletResponse response) throws IOException {
		List<User> listUsers =userService.listAll();
		UserExcelExporter exporter = new UserExcelExporter();
		exporter.export(listUsers, response);
	}
}
