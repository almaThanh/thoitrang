package com.shopme.admin.category;


import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class UserService {
	public static final int USERS_PER_PAGE=4;
	@Autowired
	private UserRepository userRepo;
	@Autowired
	private RoleRepository roleRepo;
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public User getByEmail(String email) {
		return userRepo.getUserByEmail(email);
	}
	
	
	
	public List<User> listAll(){
		return (List<User>) userRepo.findAll(Sort.by("firstName").ascending());
	}
	
	public Page<User> listByPage(int pageNum,String sortField,String sortDir,String keyword){
		Sort sort = Sort.by(sortField);
		sort=sortDir.equals("asc") ? sort.ascending():sort.descending();
		
		Pageable pageable= PageRequest.of(pageNum-1, USERS_PER_PAGE,sort);
		if(keyword!=null) {
			return userRepo.findAll(keyword,pageable);
		}
		return userRepo.findAll(pageable);
	}
	public List<Role> listRole(){
		return (List<Role>) roleRepo.findAll();
	}
	public User save(User user) {
		boolean isUpdatingUser = (user.getUserid()!=null);
		if(isUpdatingUser) {
			User existingUser=userRepo.findById(user.getUserid()).get();
			if(user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			}else {
				encodePassword(user);
			}
		}else {
			encodePassword(user);
		}
		return userRepo.save(user);
	}
	
	public User updateAccount(User userInForm) {
		User userInDB =userRepo.findById(userInForm.getUserid()).get();
		if(!userInForm.getPassword().isEmpty()) {
			userInDB.setPassword(userInForm.getPassword());
			encodePassword(userInDB);
		}
		if(userInForm.getPhotos() != null) {
			userInDB.setPhotos(userInForm.getPhotos());
		}
		userInDB.setFirstName(userInForm.getFirstName());
		userInDB.setLastName(userInForm.getLastName());
		return userRepo.save(userInDB);
	}
	private void encodePassword(User user) {
		String encodedPassword=passwordEncoder.encode(user.getPassword());
		user.setPassword(encodedPassword);
		}
	public boolean isEmailUnique(Integer userid,String email) {
		User userEmail= userRepo.getUserByEmail(email);
		if(userEmail==null)return true;
		boolean isCreatingNew=(userid ==null);
		if(isCreatingNew) {
			if(userEmail != null)return false;
		}else {
			if(userEmail.getUserid()!= userid) {
				return false;
			}
		}
		 return true;

	}
	public User get(Integer userid) throws UserNotFoundException  {
		try {
			return userRepo.findById(userid).get();
		}catch (NoSuchElementException ex) {
			throw new UserNotFoundException("Could not find any user with id"+ userid);
		}
		
	}
	public void delete(Integer userid)throws UserNotFoundException{
		Long countById= userRepo.countByUserid(userid);
		if(countById==null||countById==0) {
			throw new UserNotFoundException("Could not find any user with id"+ userid);
		}
        userRepo.deleteById(userid);
    }
	public void updateUserEnableStatus(Integer userid,boolean enabled) {
		userRepo.updateEnabledStatus(userid, enabled);
	}
}
